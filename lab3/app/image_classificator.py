import streamlit as st
from PIL import Image
import numpy as np
import tensorflow as tf
from tensorflow.keras.applications.mobilenet_v2 import MobileNetV2, preprocess_input

# –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å (–∫–µ—à–∏—Ä—É–µ–º)
@st.cache_resource
def load_model():
    return MobileNetV2(weights='imagenet')

# –°–ª–æ–≤–∞—Ä—å —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤
CLASS_TRANSLATION = {
    "dog": "—Å–æ–±–∞–∫–∞",
    "cat": "–∫–æ—à–∫–∞",
    "car": "–∞–≤—Ç–æ–º–æ–±–∏–ª—å",
    "bird": "–ø—Ç–∏—Ü–∞",
    "apple": "—è–±–ª–æ–∫–æ",
    # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –Ω—É–∂–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã
}

def preprocess_image(img):
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º RGBA –≤ RGB –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    if img.mode == 'RGBA':
        img = img.convert('RGB')
    img = img.resize((224, 224))
    x = np.array(img)
    x = np.expand_dims(x, axis=0)
    return preprocess_input(x)

def load_image():
    uploaded_file = st.file_uploader("üì§ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", type=['jpg', 'jpeg', 'png'])
    if uploaded_file:
        img = Image.open(uploaded_file)
        st.image(img, caption="–í–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", use_column_width=True)
        return img
    return None

def display_predictions(preds, top=3):
    st.write("üîç **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è:**")
    top_indices = preds[0].argsort()[-top:][::-1]
    for i, idx in enumerate(top_indices):
        st.success(f"{i+1}. Class {idx} (probability: {preds[0][idx]*100:.1f}%)")

# --- –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å ---
model = load_model()
st.title("üñºÔ∏è –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")

img = load_image()
if img and st.button("üîé –†–∞—Å–ø–æ–∑–Ω–∞—Ç—å"):
    with st.spinner("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ..."):
        try:
            x = preprocess_image(img)
            preds = model.predict(x)
            display_predictions(preds)
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞: {str(e)}")